#!/usr/bin/env node
'use strict';

// Ping graphing tool:
// pingg google.com yahoo.com

const TS = require('./ts').$ts;
const Config = require('bcfg');
const blessed = require('blessed');
const contrib = require('blessed-contrib');
const cp = require('child_process');
let netroute;
try {
  netroute = require('netroute');
} catch(e) {}

// Parse arguments
const config = new Config('pingg', {
	alias: {
		'c': 'colors',
		'f': 'flood',
		'A': 'flood',
		't': 'trace',
		'p': 'prune',
		'g': 'gateway',
		'i': 'interval',
	},
});
config.inject({
	'prune': 1000,
	'colors': ['green', 'blue', 'red', 'white', 'yellow', 'magenta'],
});
config.load({ argv: true });

let gateway;
try {
	gateway = netroute.getGateway();
} catch(e) {}
if (!config.argv.length)
	config.argv = ['8.8.8.8', '1.1.1.1', gateway].filter(Boolean);
else if (config.bool('gateway') && gateway)
	config.argv.push(gateway);
if (config.get('trace')) {
	if (config.str('trace') !== 'true')
		config.argv = [config.get('trace')];
	config.argv = cp.execSync('traceroute '+ config.argv[0])
		.toString().split('\n').reduce((arr, s) => {
			const e = / \(([\w.]+)\) /.exec(s);
			e && e[1] && arr.push(e[1]);
			return arr;
		}, []);
}

const colors = config.array('colors');
const data = [];
let cIndex = 0;

// Setup display
const screen = blessed.screen();
const line = contrib.line({
	xLabelPadding: 3,
	xPadding: 5,
	yLabelPadding: 1,
	yPadding: 1,
	showLegend: true,
	label: 'Network latency',
});
screen.append(line);
// Keybinds to exit
screen.key(['escape', 'q', 'C-c'], _ => process.exit(0));
screen.key(['C-p'], prune);
screen.render();

// Ping each host and display results
for (const host of config.argv) {
	const ping = cp.spawn('ping', [host].concat(
		config.get ('interval') && ['-i', config.get('interval')]  ||
		config.bool('flood') && ['-A'] || []));
	const hostData = {
		title: host,
		x:[],
		y:[],
		ts:[],
		style: {
			line: colors[cIndex++ % colors.length],
		},
	};
	data.push(hostData);

	let pingIndex = 0;
	ping.stdout.on('data', function(d) {
		const latency = (/time=([\d\.]+) ms/g).exec(d.toString());
		if (latency) {
			const d = new Date();
			hostData.x.push(d.toLocaleTimeString());
			hostData.y.push(parseFloat(latency[1]));
			hostData.ts.push(Math.floor(d / 1000)); // X but for the ts lib
			if (config.int('prune') && !(pingIndex++ % config.int('prune')))
				prune();
			line.setData(data);
			screen.render();
		}
	});

	ping.stdout.on('end', function() {
		hostData.title = '!! ' + host;
	});

	// Ctrl-z will stop without exiting
	screen.key(['C-z'], _ => ping.kill());
}

// Prune - Remove static from the data to make it smaller
function prune() {
	for (const hostData of data) {
		if (!hostData.ts.length) continue;
		const after = TS.numeric(
			hostData.ts.map((x, i) => {
				return [x, hostData.y[i]];
			})
		).simplify();
		if (after.data.length < hostData.x.length) {
			hostData.x = [];
			hostData.y = [];
			hostData.ts = [];
			for (const [ts ,v] of after.data) {
				hostData.y.push(v);
				hostData.ts.push(ts);
				hostData.x.push((new Date(ts * 1000)).toLocaleTimeString());
			}
		}
	}
};
